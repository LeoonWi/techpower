#!/usr/bin/env node

const http = require('http');
const https = require('https');
const { URL } = require('url');

const SERVER_URL = 'http://109.120.139.145:8080';
const TEST_ENDPOINT = '/auth/signin';

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
console.log(`üì° –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
console.log(`üîç –¢–µ—Å—Ç–æ–≤—ã–π endpoint: ${TEST_ENDPOINT}`);
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

function testConnection(url) {
  return new Promise((resolve, reject) => {
    const parsedUrl = new URL(url);
    const client = parsedUrl.protocol === 'https:' ? https : http;
    
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),
      path: parsedUrl.pathname,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'NetworkTest/1.0',
      },
      timeout: 30000,
    };

    const req = client.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const testData = JSON.stringify({
      phone_number: '79785882272',
      password: 'qwerty',
      permission: '100'
    });

    req.write(testData);
    req.end();
  });
}

async function runTests() {
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    const result = await testConnection(SERVER_URL + TEST_ENDPOINT);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${result.statusCode}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –∏–∑–º–µ—Ä–µ–Ω–æ`);
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, Object.keys(result.headers));
    
    if (result.statusCode === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (result.statusCode === 400) {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π 400 (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${result.statusCode}`);
    }
    
    console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result.data.substring(0, 200));
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.log(`   –¢–∏–ø: ${error.name}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    console.log(`   –ö–æ–¥: ${error.code || 'N/A'}`);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω');
      console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ—Ä—Ç');
      console.log('   - –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    } else if (error.code === 'ENOTFOUND') {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å DNS');
      console.log('   - –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    } else if (error.message === 'Request timeout') {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      console.log('   - –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
    }
  }
  
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('');
  console.log('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:');
  console.log('   adb shell curl -v http://109.120.139.145:8080/auth/signin');
  console.log('');
  console.log('üì± –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ Android:');
  console.log('   adb logcat -s ReactNativeJS');
}

runTests().catch(console.error); 